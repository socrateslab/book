I"PZ<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fa fa-file-text"></i> Table</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#网络模拟" id="markdown-toc-网络模拟">网络模拟</a></li>
  <li><a href="#basic-implementation" id="markdown-toc-basic-implementation">Basic implementation</a></li>
  <li><a href="#参考" id="markdown-toc-参考">参考</a></li>
</ul>

  </nav>
</aside>

<p>张江等提出了一个几何网络模型，该模型主要强调了一种空间受限的链接机制。模型假设：每个时间点$t$ 一个新的节点 $P$ 出现在几何空间里的一个随机的位置, 如果 $P$ 在至少一个老节点$Q$的几何半径$r$的范围内，$P$ 才会被加入该网络，否则就会被删除。</p>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/c2386f54ace597b90525c29f36fb42c2.png" alt="geometric-grpah-model" /></p>

<p>具体而言：</p>

<ul>
  <li>网络的增长来源于新节点点的加入；</li>
  <li>新节点落入几何空间中的位置是随机的，但是只有当新节点的位置处于至少某一个老节点的半径中时，新节点才会被真正加入进来，否则则会被删除。</li>
  <li>新节点与老节点之间建立链接的方式可以分为至少四种方式：
    <ul>
      <li>任意一个老节点，只要新节点在它的半径内，就与之建立链接；</li>
      <li>对于那些新节点在其半径内的老节点，新节点只与链接最多的那个建立链接；</li>
      <li>对于那些新节点在其半径内的老节点，新节点只与链接最少的那个建立链接；</li>
      <li>对于那些新节点在其半径内的老节点，新节点以一定的概率选择只与链接最多的那个建立链接，或者只与链接最少的那个建立链接；</li>
    </ul>
  </li>
</ul>

<p>这个几何模型，不仅适用于物理空间，也适用于抽象空间（abstracted space）。前者包括城市、因特网的autonomous systems、大脑，后者包括相似性空间（similarity space，如引文网络、科学合作网络、在线社区）、语义空间、生态位空间（niche space）</p>

<h2 id="网络模拟">网络模拟</h2>

<p>可以采用python作为编程环境来实现这个过程。首先导入一下常用的科学计算、网络算法和绘图的包。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">scipy.sparse</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="n">nx</span>
<span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="kn">import</span> <span class="n">leastsq</span>
<span class="kn">from</span> <span class="nn">rtree</span> <span class="kn">import</span> <span class="n">index</span> <span class="c1">#必备包，为了让模型加速
</span></code></pre></div></div>

<p>之后我们来定义一个模型初始化的函数，输入L、d、r三个参数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">initiate</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">r</span><span class="p">):</span>
  <span class="c1"># input: L range, d dimension, r radius
</span>  <span class="c1"># generate nodes that carry coordinates
</span>  <span class="n">coordinate</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">*</span><span class="n">L</span><span class="o">/</span><span class="mi">2</span>
  <span class="n">nodelist</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="n">coordinate</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">0</span><span class="p">}}</span>
  <span class="c1"># 1: coordinate, 3: borning time, 4: In degree, 5: out degree
</span>
  <span class="c1"># Create 2D index, Using Rtree to accelerate
</span>  <span class="n">p</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">Property</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">d</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">:</span>
      <span class="n">p</span><span class="p">.</span><span class="n">dimension</span> <span class="o">=</span> <span class="n">d</span>
  <span class="k">else</span><span class="p">:</span>
      <span class="n">p</span><span class="p">.</span><span class="n">dimension</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">idxnd</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">Index</span><span class="p">(</span><span class="n">properties</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
  <span class="n">limitt</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">d</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">nodelist</span><span class="p">:</span>
      <span class="n">ele</span><span class="o">=</span><span class="n">nodelist</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
      <span class="n">xs</span><span class="o">=</span><span class="n">ele</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
      <span class="n">rectangle1</span><span class="o">=</span><span class="n">xs</span><span class="o">-</span><span class="n">r</span>
      <span class="n">rectangle2</span><span class="o">=</span><span class="n">xs</span><span class="o">+</span><span class="n">r</span>
      <span class="k">if</span> <span class="n">d</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
          <span class="n">idxnd</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,[</span><span class="n">rectangle1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">rectangle2</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="n">idxnd</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">r_</span><span class="p">[</span><span class="n">rectangle1</span><span class="p">,</span><span class="n">rectangle2</span><span class="p">]))</span>
      <span class="n">limitt</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">r_</span><span class="p">[</span><span class="n">rectangle1</span><span class="p">,</span><span class="n">rectangle2</span><span class="p">]</span>
  <span class="c1"># nodelist: a list of nodes, idxnd: Rtree indices, limitt: Rectangle boundary
</span>  <span class="k">return</span> <span class="p">(</span><span class="n">nodelist</span><span class="p">,</span><span class="n">idxnd</span><span class="p">,</span><span class="n">limitt</span><span class="p">)</span>
</code></pre></div></div>
<p>接下来，可以定义一个网络模型生长迭代的函数onestep。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">onestep</span><span class="p">(</span><span class="n">nodelist</span><span class="p">,</span><span class="n">idxnd</span><span class="p">,</span><span class="n">L</span><span class="p">,</span><span class="n">network</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span><span class="n">time</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">r</span><span class="p">):</span>
  <span class="c1">#计算几何图占方形区域面积
</span>  <span class="n">aa</span><span class="o">=</span><span class="mi">1</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
      <span class="n">aa</span><span class="o">=</span><span class="n">aa</span><span class="o">*</span><span class="p">(</span><span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">]</span><span class="o">-</span><span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
  <span class="n">locallambda</span><span class="o">=</span><span class="n">aa</span><span class="o">/</span><span class="p">(</span><span class="n">L</span><span class="o">**</span><span class="n">d</span><span class="p">)</span>
  <span class="c1"># Bias sample the area of aa (valid area) to accelerate.
</span>  <span class="c1"># And the average time interval between two random valid nodes
</span>  <span class="c1"># follow an exponential distribution, some time can generated virtually
</span>  <span class="n">time</span><span class="o">+=</span><span class="n">random</span><span class="p">.</span><span class="n">expovariate</span><span class="p">(</span><span class="n">locallambda</span><span class="p">)</span>
  <span class="c1"># Generate a random node within the valid area
</span>  <span class="n">newpoint</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="n">limit</span><span class="p">[</span><span class="n">d</span><span class="o">+</span><span class="n">v</span><span class="p">]</span><span class="o">-</span><span class="n">limit</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="o">+</span><span class="n">limit</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">d</span><span class="p">)])</span>

  <span class="c1">#Search for neighbors
</span>  <span class="k">if</span> <span class="n">d</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
      <span class="n">hits</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">idxnd</span><span class="p">.</span><span class="n">intersection</span><span class="p">((</span><span class="n">newpoint</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">newpoint</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>
  <span class="k">else</span><span class="p">:</span>
      <span class="n">hits</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">idxnd</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">r_</span><span class="p">[</span><span class="n">newpoint</span><span class="p">,</span><span class="n">newpoint</span><span class="p">])))</span>
  <span class="n">neighbors</span><span class="o">=</span><span class="p">{}</span>
  <span class="n">newedges</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">hits</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hits</span><span class="p">:</span>
          <span class="n">node</span><span class="o">=</span><span class="n">nodelist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
          <span class="n">distance</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">newpoint</span><span class="p">)</span>
          <span class="k">if</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">r</span><span class="p">:</span>
              <span class="n">ind</span><span class="o">=</span><span class="n">i</span>
              <span class="n">neighbors</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">ind</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">neighbors</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
      <span class="c1"># Real adding nodes and links
</span>      <span class="n">nodelist</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">nodelist</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="n">newpoint</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="n">time</span><span class="p">,</span><span class="mi">4</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">neighbors</span><span class="p">)}</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
          <span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">newpoint</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">r</span><span class="p">)</span>
          <span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">limit</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">],</span><span class="n">newpoint</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">r</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">nd</span> <span class="ow">in</span> <span class="n">neighbors</span><span class="p">:</span>
          <span class="n">node</span><span class="o">=</span><span class="n">nodelist</span><span class="p">[</span><span class="n">nd</span><span class="p">]</span>
          <span class="n">node</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="n">node</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
          <span class="n">newedges</span><span class="o">=</span><span class="n">newedges</span><span class="o">+</span><span class="mi">1</span>
      <span class="k">if</span> <span class="n">d</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
          <span class="n">idxnd</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nodelist</span><span class="p">),[</span><span class="n">newpoint</span><span class="o">-</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">newpoint</span><span class="o">+</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="n">rectangle1</span><span class="o">=</span><span class="n">newpoint</span><span class="o">-</span><span class="n">r</span><span class="p">;</span>
          <span class="n">rectangle2</span><span class="o">=</span><span class="n">newpoint</span><span class="o">+</span><span class="n">r</span><span class="p">;</span>
          <span class="n">rectangle</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">r_</span><span class="p">[</span><span class="n">rectangle1</span><span class="p">,</span><span class="n">rectangle2</span><span class="p">];</span>
          <span class="n">idxnd</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nodelist</span><span class="p">),</span><span class="n">rectangle</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">nodelist</span><span class="p">,</span><span class="n">idxnd</span><span class="p">,</span><span class="n">newedges</span><span class="p">,</span><span class="n">network</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span><span class="n">time</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="basic-implementation">Basic implementation</h2>

<p>接下来可以按照给定的参数来进行模拟了。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">10</span> <span class="c1"># Hypercube length
</span><span class="n">maxnode</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">5</span><span class="c1">#The wanted number of nodes
</span><span class="n">d</span><span class="o">=</span><span class="mi">2</span><span class="c1">#spatial dimension
</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="c1">#interaction area;
</span><span class="n">ndlist</span><span class="p">,</span><span class="n">idx</span><span class="p">,</span><span class="n">limit</span><span class="o">=</span><span class="n">initiate</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>

<span class="n">t</span><span class="o">=</span><span class="mi">1</span>
<span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="n">network</span><span class="o">=</span><span class="p">{};</span>

<span class="n">time</span><span class="o">=</span><span class="mi">1</span>
<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ndlist</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">maxnode</span><span class="p">:</span>
<span class="n">ndlist</span><span class="p">,</span><span class="n">idx</span><span class="p">,</span><span class="n">newedge</span><span class="p">,</span><span class="n">network</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span><span class="n">time</span><span class="o">=</span><span class="n">onestep</span><span class="p">(</span><span class="n">ndlist</span><span class="p">,</span><span class="n">idx</span><span class="p">,</span><span class="n">L</span><span class="p">,</span><span class="n">network</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span><span class="n">time</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>
<span class="k">if</span> <span class="n">newedge</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
    <span class="n">edges</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">r_</span><span class="p">[</span><span class="n">edges</span><span class="p">,</span><span class="n">edges</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">newedge</span><span class="p">];</span>
<span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">remainder</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="mi">1000</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">ndlist</span><span class="p">)</span>
<span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="参考">参考</h2>
<p><a href="http://wiki.swarma.net/index.php/匹配生长随机几何图模型">匹配生長隨機幾何圖模型</a></p>
:ET