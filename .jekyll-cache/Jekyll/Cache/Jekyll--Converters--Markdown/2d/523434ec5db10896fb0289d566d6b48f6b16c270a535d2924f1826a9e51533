I"[<p>幂律分布的存在非常广泛， 对于很多科学研究问题具有重要意义。但是，因为幂律分布的长尾具有很大的波动，因而确定长尾的范围尤为复杂。最小二乘方法估计幂律分布会有很大的误差，即使没有误差，也并未能确定这一分布是否幂律分布，因为没有同其他的分布的形式做比较，比如指数、对数正态、截尾的幂律。比较是一个数据是否符合多个分布中的一个，通常采用KS检验（<a href="https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test">Kolmogorov-Smirnov test</a>）的方法。</p>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/a23f96a8247d118985675c9bb579f75b.png" alt="ks test" /></p>

<p>上图红线表示累计概率密度函数CDF, 蓝线是实证数据的累计概函数 ECDF, 黑色箭头代表K–S 统计量.</p>

\[F_n(x)={1 \over n}\sum_{i=1}^n I_{[-\infty,x]}(X_i)\]

<p>其中，$I_{[-\infty,x]}(X_i)$ 是一个指标函数, 如果 $X_i \le x$它等于1 ，否则为0.</p>

<p>KS统计量表达为：</p>

\[D_n= \sup_x |F_n(x)-F(x)|\]

<p>当$D_n$足够大的时候，就可以拒绝原假设。</p>

<p>Clauset等人2009年发表了题为Power-law distributions in empirical data，提出了拟合幂律分布数据的思路<sup id="fnref:clauset" role="doc-noteref"><a href="#fn:clauset" class="footnote" rel="footnote">1</a></sup>。这一思路使用最大似然的方法拟合，使用Kolmogorov-Smirnov检验统计量和似然率为基础来评估拟合的结果。</p>

<p>按照这一思路，在不同的软件当中有不同的实现方式。Clauset等人罗列 了一系列的<a href="http://tuvalu.santafe.edu/~aaronc/powerlaws/">实现方式</a>，并推荐使用Alstott等人开发的powerlaw工具<sup id="fnref:powerlaw" role="doc-noteref"><a href="#fn:powerlaw" class="footnote" rel="footnote">2</a></sup>。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">powerlaw</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.cm</span> <span class="k">as</span> <span class="n">cm</span>
<span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="n">nx</span>
<span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="n">sm</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span><span class="p">,</span> <span class="n">defaultdict</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/Users/Weibo Landscape/data/aggregate.txt"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">dat</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">len</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>741754
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">G</span><span class="o">=</span><span class="n">nx</span><span class="p">.</span><span class="n">DiGraph</span><span class="p">()</span> <span class="c1"># G = nx.DiGraph() # æåçœç»
</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">dat</span><span class="p">:</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">)[:</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">b</span><span class="p">:</span>
        <span class="n">G</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nx</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'Name: \nType: DiGraph\nNumber of nodes: 151937\nNumber of edges: 279499\nAverage in degree:   1.8396\nAverage out degree:   1.8396'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">powerlaw</span>

<span class="k">def</span> <span class="nf">plotPowerlaw</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">ax</span><span class="p">,</span><span class="n">col</span><span class="p">,</span><span class="n">xlab</span><span class="p">):</span>
    <span class="n">fit</span> <span class="o">=</span> <span class="n">powerlaw</span><span class="p">.</span><span class="n">Fit</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">xmin</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">fit</span><span class="p">.</span><span class="n">plot_pdf</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">fit</span> <span class="o">=</span> <span class="n">powerlaw</span><span class="p">.</span><span class="n">Fit</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">fit</span><span class="p">.</span><span class="n">power_law</span><span class="p">.</span><span class="n">plot_pdf</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">'dotted'</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
    <span class="n">a</span><span class="p">,</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">fit</span><span class="p">.</span><span class="n">power_law</span><span class="p">.</span><span class="n">alpha</span><span class="p">,</span><span class="n">fit</span><span class="p">.</span><span class="n">power_law</span><span class="p">.</span><span class="n">xmin</span><span class="p">)</span>
    <span class="n">minx</span><span class="p">,</span><span class="n">maxx</span><span class="o">=</span><span class="n">ax</span><span class="p">.</span><span class="n">get_xlim</span><span class="p">()</span>
    <span class="n">miny</span><span class="p">,</span><span class="n">maxy</span><span class="o">=</span><span class="n">ax</span><span class="p">.</span><span class="n">get_ylim</span><span class="p">()</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">minx</span><span class="o">*</span><span class="mi">5</span><span class="p">,</span><span class="n">maxy</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span><span class="sa">r</span><span class="s">"$\alpha = %d \:\:, x_{min} = %d$"</span> <span class="o">%</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">),</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="n">xlab</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'$P(k)$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span>
<span class="n">degree</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">values</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span><span class="n">facecolor</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'rainbow_r'</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">plotPowerlaw</span><span class="p">(</span><span class="n">degree</span><span class="p">,</span><span class="n">ax</span><span class="p">,</span><span class="n">cmap</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="s">'$k$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'/Users/chengjun/çŸåºŠäºåæ­¥ç/Writing/Weibo Landscape/data/Figure2_powerlaw_PDF.png'</span><span class="p">,</span>
            <span class="n">dpi</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span> <span class="n">bbox_inches</span><span class="o">=</span><span class="s">"tight"</span><span class="p">,</span><span class="n">transparent</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Calculating best minimal value for power law fit
</code></pre></div></div>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/5319cfe727b9dcb893d64b3b61ab85b4.png" alt="powerlaw" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fitted</span> <span class="o">=</span> <span class="n">powerlaw</span><span class="p">.</span><span class="n">Fit</span><span class="p">(</span><span class="n">degree</span><span class="p">,</span> <span class="n">xmin</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>

<span class="n">fitted</span><span class="p">.</span><span class="n">alpha</span><span class="p">,</span> <span class="n">fitted</span><span class="p">.</span><span class="n">D</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2.3663242775904081, 0.034385401350230271)


```python
help(fitted_pl.distribution_compare)
```

    Help on method distribution_compare in module powerlaw:

    distribution_compare(self, dist1, dist2, nested=None, **kwargs) method of powerlaw.Fit instance
        Returns the loglikelihood ratio, and its p-value, between the two
        distribution fits, assuming the candidate distributions are nested.

        Parameters
        ----------
        dist1 : string
            Name of the first candidate distribution (ex. 'power_law')
        dist2 : string
            Name of the second candidate distribution (ex. 'exponential')
        nested : bool or None, optional
            Whether to assume the candidate distributions are nested versions
            of each other. None assumes not unless the name of one distribution
            is a substring of the other.

        Returns
        -------
        R : float
            Loglikelihood ratio of the two distributions' fit to the data. If
            greater than 0, the first distribution is preferred. If less than
            0, the second distribution is preferred.
        p : float
            Significance of R
</code></pre></div></div>

<p>R是拟合两统计分布的似然率， p值是R的显著性程度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="n">r1</span><span class="p">,</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">fitted</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'exponential'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r2</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">fitted</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'lognormal'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r3</span><span class="p">,</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">fitted</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'truncated_power_law'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r4</span><span class="p">,</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">fitted</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'stretched_exponential'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>


<span class="k">print</span> <span class="n">r1</span><span class="p">,</span> <span class="n">p1</span>
<span class="k">print</span> <span class="n">r2</span><span class="p">,</span> <span class="n">p2</span>
<span class="k">print</span> <span class="n">r3</span><span class="p">,</span> <span class="n">p3</span>
<span class="k">print</span> <span class="n">r4</span><span class="p">,</span> <span class="n">p4</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Assuming nested distributions


25001.9789239 0.0
5.97249455121 0.000547945514698
2.61348956987e-05 0.99423151641
665.388668948 0.0
</code></pre></div></div>

<p>可见该分布是幂律分布或截断幂律分布（二者无差异），但显著不同于指数分布、广延指数分布<sup id="fnref:stretched" role="doc-noteref"><a href="#fn:stretched" class="footnote" rel="footnote">3</a></sup>、对数正态分布。</p>

<p>常见的分布律 <sup id="fnref:complex" role="doc-noteref"><a href="#fn:complex" class="footnote" rel="footnote">4</a></sup></p>

<ul>
  <li>正态/高斯分布Normal distribution / Gaussian distribution</li>
  <li>对数正态分布Log-normal distribution</li>
  <li>指数/负指数分布Exponential distribution / Negative exponential distribution</li>
  <li>泊松分布Poisson distribution</li>
  <li>幂律分布Power law distribution</li>
  <li>指数截断的幂律分布Power law with exponential cutoff</li>
  <li>截断幂律Truncated power law</li>
  <li>广延指数分布Stretched exponential distribution</li>
  <li>漂移幂律Shifted power law</li>
</ul>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/8b22fa094fcac40ca66141e75d47eb79.png" alt="formula" /></p>

<h2 id="另外一个例子">另外一个例子</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">networkx.utils</span> <span class="kn">import</span> <span class="n">powerlaw_sequence</span>

<span class="n">pl_sequence</span> <span class="o">=</span> <span class="n">powerlaw_sequence</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="n">exponent</span><span class="o">=</span><span class="mf">2.5</span><span class="p">)</span>

<span class="n">fitted_pl</span> <span class="o">=</span> <span class="n">powerlaw</span><span class="p">.</span><span class="n">Fit</span><span class="p">(</span><span class="n">pl_sequence</span><span class="p">)</span>

<span class="n">fitted_pl</span><span class="p">.</span><span class="n">alpha</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.4627497555168394
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fitted_pl</span><span class="p">.</span><span class="n">D</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.016086740927675369
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r1</span><span class="p">,</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">fitted_pl</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'exponential'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r2</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">fitted_pl</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'lognormal'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r3</span><span class="p">,</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">fitted_pl</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'truncated_power_law'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">r4</span><span class="p">,</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">fitted_pl</span><span class="p">.</span><span class="n">distribution_compare</span><span class="p">(</span><span class="s">'power_law'</span><span class="p">,</span> <span class="s">'stretched_exponential'</span><span class="p">,</span> <span class="n">nested</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>


<span class="k">print</span> <span class="n">r1</span><span class="p">,</span> <span class="n">p1</span>
<span class="k">print</span> <span class="n">r2</span><span class="p">,</span> <span class="n">p2</span>
<span class="k">print</span> <span class="n">r3</span><span class="p">,</span> <span class="n">p3</span>
<span class="k">print</span> <span class="n">r4</span><span class="p">,</span> <span class="n">p4</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>438.9629348 0.0
0.00543046554532 0.916998102815
-0.0013573718109 0.958446461888
5.13999579922 0.00134480559265
</code></pre></div></div>

<h1 id="参考文献">参考文献</h1>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:clauset" role="doc-endnote">
      <p>A. Clauset, C.R. Shalizi, and M.E.J. Newman, “Power-law distributions in empirical data” SIAM Review 51(4), 661-703 (2009). (arXiv:0706.1062, doi:10.1137/070710111) <a href="#fnref:clauset" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:powerlaw" role="doc-endnote">
      <p>Alstott, J., Bullmore, E., &amp; Plenz, D. (2014). Powerlaw: a Python package for analysis of heavy-tailed distributions. Plos One, 9(1), e85777. <a href="#fnref:powerlaw" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:stretched" role="doc-endnote">
      <p>stretched exponential function $f_\beta (t) = e^{ -t^\beta }$ <a href="#fnref:stretched" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:complex" role="doc-endnote">
      <p>复杂性科学研究中常见分布律及数据拟合方法 http://blog.sciencenet.cn/blog-419840-601485.html <a href="#fnref:complex" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET