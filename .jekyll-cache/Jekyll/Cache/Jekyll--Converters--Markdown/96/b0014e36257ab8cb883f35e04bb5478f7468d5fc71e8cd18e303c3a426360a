I"޳<p>Author: <a href="http://www.ed.ac.uk/history-classics-archaeology/about-us/staff-profiles/profile_tab1_academic.php?uun=xrubioc&amp;search=2">Xavier Rubio-Campillo</a></p>

<p>https://github.com/xrubio/simulationdh （View it on <a href="http://nbviewer.jupyter.org/github/xrubio/simulationdh/blob/v1.1/doc/DH2016tutorial.ipynb">nbviewr</a>)</p>

<p>The tutorial was held on 11th July, 2016 within the <strong>Digital Humanities conference</strong> at Krakow, Poland. It is recommended to begin by taking a look at the introductory presentation at <a href="https://github.com/xrubio/simulationdh">doc/slides.pdf</a>. The second step would be to setup the environment and follow the tutorial at doc/DHtutorial.pdf. You can finally check the result against the code found in src/DHworkshop.py and extend the model to solve the challenges defined at the end of slides.pdf</p>

<p>We will create a model depicting <strong>competition between two cultural traits</strong> within a common population. This is a typical <strong>cultural dynamics</strong> scenario where individuals must adopt one option amongst two or more mutually exclusive options (i.e. religion, elections, football teams). In this case we are interested in situations when you have to choose one option (e.g., you cannot practice two religions), but more complex versions with individuals adopting more than one trait can easily be developed.</p>

<blockquote>
  <p>Individuals can change their choice over time. The decision is based on the payoff of each trait.</p>
</blockquote>

<p>This payoff is a measure of the relative interest of the trait, based on:</p>

<p>a) how many people exhibits the trait and</p>

<p>b) the attractiveness of the trait.</p>

<p>An example of this dynamic could be a competition between two different religions. The number of people practicing a belief makes this belief more appealing. However, some beliefs could be intrinsically more interesting for some individuals so part of the population could adopt them even if they are a minority. Finally, social norms are not static so the attractiveness of specific beliefs can vary over time.</p>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/f801e211a3cf1f0275214fc73d2fb5a0.png" alt="path_intro" /></p>

<p>Time is divided in discrete steps starting at t = 0.</p>

<p>At each step t the two populations At and Bt are updated as individuals move from A to B and from B to A. Take into accout that the value here can be negative meaning that more people move from B to A.</p>

<p>At+1=At+ΔAB</p>

<p>Bt+1=Bt−ΔAB</p>

<p>Let’s see how we can express it in code.</p>

<p>First, we need to define the number of individuals in the population. Say we want to start with 100 people. The text after a hash symbol is just a comment so you can skip it for now, but in general it is a good idea to keep documenting the code as you write.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>   <span class="c1"># total population size
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Then, we decide on how many believers of each cultural option (religion) we want to start with.
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>    <span class="c1"># initial number of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="n">A</span> <span class="c1"># initial number of believers A
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># variation has not been defined yet.
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>  
</code></pre></div></div>

<p>So let’s calculate <strong>variation</strong> based on the population switching trait based on a comparison between payoffs. For example if B has higher payoff then A then we should get something like this:</p>

<h3 id="delta_a-rightarrow-b--a-payoff_a-rightarrow-b---payoff_b-rightarrow-a">\(\Delta_{A \rightarrow B} = A (Payoff_{A \rightarrow B} - Payoff_{B \rightarrow A})\)</h3>

<p>So the proportion of population A that switches to B is proportional to the difference between payoffs. As we mentioned the payoff of a trait is determined by the population exhibiting the competing trait as well as its intrinsic attractiveness.</p>

<p>To define the payoff we need to implement the following competition equations:</p>

<h3 id="payoff_b-rightarrow-a--fraca_tn-fract_at_a--t_b">\(Payoff_{B \rightarrow A} = \frac{A_t}{N} \frac{T_A}{T_A + T_B}\)</h3>

<h3 id="payoff_a-rightarrow-b--fracb_tn-fract_bt_a--t_b">\(Payoff_{A \rightarrow B} = \frac{B_t}{N} \frac{T_B}{T_A + T_B}\)</h3>

<ul>
  <li>The first term is the proportion of the entire population N holding a particular cultural trait (At/N for A and Bt/N for B).</li>
  <li>The second element of the equations is the balance between the attractiveness of both ideas (TA and TB) expressed as the attractiveness of the given trait in respect to the total ‘available’ attractiveness (TA+TB).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">payoff</span><span class="p">(</span><span class="n">believers</span><span class="p">,</span> <span class="n">Tx</span><span class="p">,</span><span class="n">Ty</span><span class="p">):</span>    
    <span class="n">proportionBelievers</span> <span class="o">=</span> <span class="n">believers</span><span class="o">/</span><span class="n">N</span>
    <span class="n">attraction</span> <span class="o">=</span> <span class="n">Tx</span><span class="o">/</span><span class="p">(</span><span class="n">Ty</span> <span class="o">+</span> <span class="n">Tx</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">proportionBelievers</span> <span class="o">*</span> <span class="n">attraction</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># temporal dimension
</span><span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>               <span class="c1"># initial time
</span>
<span class="c1"># init populations
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>          <span class="c1"># population size
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>           <span class="c1"># initial population of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span><span class="o">-</span><span class="n">A</span>             <span class="c1"># initial population of believers B
</span>
<span class="c1"># additional params
</span><span class="n">Ta</span> <span class="o">=</span> <span class="mf">1.0</span>            <span class="c1"># initial attractiveness of option A
</span><span class="n">Tb</span> <span class="o">=</span> <span class="mf">2.0</span>            <span class="c1"># initial attractiveness of option B
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>         <span class="c1"># strength of the transmission process
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># calculate the payoff for change of believers A and B in the current time step       
</span><span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
<span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
<span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>
<span class="n">difference</span>

<span class="c1"># the proportion of population B that switches to A is proportional to the difference between payoffs.
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># when difference &gt; 0, B will switch to A
# Else, A will switch to B.
</span>
<span class="c1"># B -&gt; A   
</span><span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
<span class="c1"># A -&gt; B        
</span><span class="k">else</span><span class="p">:</span>
    <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

<span class="n">variation</span>

<span class="c1"># when variation &gt; 0, B will switch to A
# Else, A will switch to B.
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># control the pace of change with alpha
</span><span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># calculate the payoff for change of believers A and B in the current time step       
</span>    <span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
    <span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
    <span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>

    <span class="c1"># B -&gt; A   
</span>    <span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
    <span class="c1"># A -&gt; B        
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

    <span class="c1"># control the pace of change with alpha
</span>    <span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>  

    <span class="c1"># update the population    
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="tracing-the-changes">Tracing the changes</h2>

<ul>
  <li>First, add the initial number of believers to their respective lists.</li>
  <li>Second, we also need to update the number of believers for each step.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialisation
</span><span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>               <span class="c1"># initial time
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>           <span class="c1"># population size
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>              <span class="c1"># initial proportion of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span><span class="o">-</span><span class="n">A</span>             <span class="c1"># initial proportion of believers B
</span>
<span class="n">Ta</span> <span class="o">=</span> <span class="mf">1.0</span>            <span class="c1"># initial attractiveness of option A
</span><span class="n">Tb</span> <span class="o">=</span> <span class="mf">2.0</span>            <span class="c1"># initial attractiveness of option B
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>         <span class="c1"># strength of the transmission process
</span>
<span class="c1"># initialise the list used for plotting
</span><span class="n">believersA</span> <span class="o">=</span> <span class="p">[]</span>    
<span class="n">believersB</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># add the initial populations
</span><span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># calculate the payoff for change of believers A and B in the current time step       
</span>    <span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
    <span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
    <span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>

        <span class="c1"># B -&gt; A   
</span>    <span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
    <span class="c1"># A -&gt; B        
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

    <span class="c1"># control the pace of change with alpha
</span>    <span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>  

    <span class="c1"># update the population    
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>   

    <span class="c1"># save the values to a list for plotting    
</span>    <span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
    <span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>      <span class="c1"># plotting library
</span><span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'ggplot'</span><span class="p">)</span>              <span class="c1"># makes the graphs look pretty
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot the results    
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersA</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'A'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersB</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'B'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'$Time$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'$Number$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/cb201bbf89d946a001e6f724b63dfba6.png" alt="social simulation 1" /></p>

<h2 id="let-the-attractiveness-of-each-optio-change-through-time">Let the attractiveness of each optio change through time.</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">attractiveness</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">):</span>
    <span class="n">Ka</span> <span class="o">=</span> <span class="mf">0.1</span>  
    <span class="n">Kb</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">Ta</span> <span class="o">=</span> <span class="n">Ta</span> <span class="o">+</span> <span class="n">Ka</span>
    <span class="n">Tb</span> <span class="o">=</span> <span class="n">Tb</span> <span class="o">+</span> <span class="n">Kb</span>
    <span class="k">return</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialisation
</span><span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>               <span class="c1"># initial time
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>           <span class="c1"># population size
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>              <span class="c1"># initial proportion of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span><span class="o">-</span><span class="n">A</span>             <span class="c1"># initial proportion of believers B
</span>
<span class="n">Ta</span> <span class="o">=</span> <span class="mf">1.0</span>            <span class="c1"># initial attractiveness of option A
</span><span class="n">Tb</span> <span class="o">=</span> <span class="mf">2.0</span>            <span class="c1"># initial attractiveness of option B
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>         <span class="c1"># strength of the transmission process
</span>
<span class="c1"># initialise the list used for plotting
</span><span class="n">believersA</span> <span class="o">=</span> <span class="p">[]</span>    
<span class="n">believersB</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># add the initial populations
</span><span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># update attractiveness
</span>    <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span> <span class="o">=</span> <span class="n">attractiveness</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>
    <span class="c1"># calculate the payoff for change of believers A and B in the current time step           
</span>    <span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
    <span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
    <span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>

        <span class="c1"># B -&gt; A   
</span>    <span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
    <span class="c1"># A -&gt; B        
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

    <span class="c1"># control the pace of change with alpha
</span>    <span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>  

    <span class="c1"># update the population    
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>   

    <span class="c1"># save the values to a list for plotting    
</span>    <span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
    <span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot the results    
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersA</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'A'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersB</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'B'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'$Time$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'$Number$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/f01ee4996485d9653dc2104ce5784764.png" alt="social simulation 2" /></p>

<p>There are a number of functions we can use to dynamically change the ‘attractiveness’ of each trait.
Try the following ones:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> <span class="c1"># stick this line at the beginning of the script alongside other 'imports'
</span>

<span class="k">def</span> <span class="nf">attractiveness2</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">):</span>
    <span class="c1"># temporal autocorrelation with stochasticity (normal distribution)
</span>    <span class="c1"># we get 2 samples from a normal distribution N(0,1)
</span>    <span class="n">Ka</span><span class="p">,</span> <span class="n">Kb</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="c1"># compute the difference between Ks
</span>    <span class="n">diff</span> <span class="o">=</span> <span class="n">Ka</span><span class="o">-</span><span class="n">Kb</span>
    <span class="c1"># apply difference of Ks to attractiveness
</span>    <span class="n">Ta</span> <span class="o">+=</span> <span class="n">diff</span>
    <span class="n">Tb</span> <span class="o">-=</span> <span class="n">diff</span>
    <span class="k">return</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span>

<span class="k">def</span> <span class="nf">attractiveness3</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">):</span>
    <span class="c1">#  anti-conformism dynamics (more population means less attractiveness)
</span>
    <span class="c1"># both values initialized at 0
</span>    <span class="n">Ka</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">Kb</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># first we sample gamma with mean=last popSize of A times relevance    
</span>    <span class="n">diffPop</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">gamma</span><span class="p">(</span><span class="n">believersA</span><span class="p">[</span><span class="n">t</span><span class="p">])</span>
    <span class="c1"># we sustract from this value the same computation for population B
</span>    <span class="n">diffPop</span> <span class="o">=</span> <span class="n">diffPop</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">gamma</span><span class="p">(</span><span class="n">believersB</span><span class="p">[</span><span class="n">t</span><span class="p">])</span>

    <span class="c1"># if B is larger then we need to increase the attractiveness of A
</span>    <span class="k">if</span> <span class="n">diffPop</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">Ka</span> <span class="o">=</span> <span class="o">-</span><span class="n">diffPop</span>
    <span class="c1"># else A is larger and we need to increase the attractiveness of B
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">Kb</span> <span class="o">=</span> <span class="n">diffPop</span>

    <span class="c1"># change current values
</span>    <span class="n">Ta</span> <span class="o">=</span> <span class="n">Ta</span> <span class="o">+</span> <span class="n">Ka</span>
    <span class="n">Tb</span> <span class="o">=</span> <span class="n">Tb</span> <span class="o">+</span> <span class="n">Kb</span>

    <span class="k">return</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span>
</code></pre></div></div>

<h3 id="temporal-autocorrelation-with-stochasticity-normal-distribution">temporal autocorrelation with stochasticity (normal distribution)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialisation
</span><span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>               <span class="c1"># initial time
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>           <span class="c1"># population size
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>              <span class="c1"># initial proportion of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span><span class="o">-</span><span class="n">A</span>             <span class="c1"># initial proportion of believers B
</span>
<span class="n">Ta</span> <span class="o">=</span> <span class="mf">1.0</span>            <span class="c1"># initial attractiveness of option A
</span><span class="n">Tb</span> <span class="o">=</span> <span class="mf">2.0</span>            <span class="c1"># initial attractiveness of option B
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>         <span class="c1"># strength of the transmission process
</span>
<span class="c1"># initialise the list used for plotting
</span><span class="n">believersA</span> <span class="o">=</span> <span class="p">[]</span>    
<span class="n">believersB</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># add the initial populations
</span><span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># update attractiveness
</span>    <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span> <span class="o">=</span> <span class="n">attractiveness2</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>
    <span class="c1"># calculate the payoff for change of believers A and B in the current time step           
</span>    <span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
    <span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
    <span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>

        <span class="c1"># B -&gt; A   
</span>    <span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
    <span class="c1"># A -&gt; B        
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

    <span class="c1"># control the pace of change with alpha
</span>    <span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>  

    <span class="c1"># update the population    
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>   

    <span class="c1"># save the values to a list for plotting    
</span>    <span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
    <span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot the results    
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersA</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'A'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersB</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'B'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'$Time$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'$Number$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/e85d25a5ffcccde3f7f1db1e531bfc9b.png" alt="social simulation 4" /></p>

<h3 id="anti-conformism-dynamics-more-population-means-less-attractiveness">anti-conformism dynamics (more population means less attractiveness)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialisation
</span><span class="n">MAX_TIME</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>               <span class="c1"># initial time
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>           <span class="c1"># population size
</span><span class="n">A</span> <span class="o">=</span> <span class="mi">65</span>              <span class="c1"># initial proportion of believers A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">N</span><span class="o">-</span><span class="n">A</span>             <span class="c1"># initial proportion of believers B
</span>
<span class="n">Ta</span> <span class="o">=</span> <span class="mf">1.0</span>            <span class="c1"># initial attractiveness of option A
</span><span class="n">Tb</span> <span class="o">=</span> <span class="mf">2.0</span>            <span class="c1"># initial attractiveness of option B
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>         <span class="c1"># strength of the transmission process
</span>
<span class="c1"># initialise the list used for plotting
</span><span class="n">believersA</span> <span class="o">=</span> <span class="p">[]</span>    
<span class="n">believersB</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># add the initial populations
</span><span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">MAX_TIME</span><span class="p">:</span>
    <span class="c1"># update attractiveness
</span>    <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span> <span class="o">=</span> <span class="n">attractiveness3</span><span class="p">(</span><span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>
    <span class="c1"># calculate the payoff for change of believers A and B in the current time step           
</span>    <span class="n">variationBA</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Ta</span><span class="p">,</span> <span class="n">Tb</span><span class="p">)</span>      
    <span class="n">variationAB</span> <span class="o">=</span> <span class="n">payoff</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">Tb</span><span class="p">,</span> <span class="n">Ta</span><span class="p">)</span>     
    <span class="n">difference</span> <span class="o">=</span> <span class="n">variationBA</span> <span class="o">-</span> <span class="n">variationAB</span>

        <span class="c1"># B -&gt; A   
</span>    <span class="k">if</span> <span class="n">difference</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">B</span>
    <span class="c1"># A -&gt; B        
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">variation</span> <span class="o">=</span> <span class="n">difference</span><span class="o">*</span><span class="n">A</span>

    <span class="c1"># control the pace of change with alpha
</span>    <span class="n">variation</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="n">variation</span>  

    <span class="c1"># update the population    
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">variation</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">variation</span>   

    <span class="c1"># save the values to a list for plotting    
</span>    <span class="n">believersA</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
    <span class="n">believersB</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>

    <span class="c1"># advance time to next iteration
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot the results    
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersA</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'A'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">believersB</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'B'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'$Time$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'$Number$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://oaf2qt3yk.bkt.clouddn.com/460f04a96f3f350e29a98933e0470662.png" alt="social simulation 4" /></p>
:ET